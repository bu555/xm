idea激活码:
EB101IWSWD-eyJsaWNlbnNlSWQiOiJFQjEwMUlXU1dEIiwibGljZW5zZWVOYW1lIjoibGFuIHl1IiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJSUzAiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJXUyIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IlJEIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUkMiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJEQyIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IkRCIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUk0iLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IkFDIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiRFBOIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUFMiLCJwYWlkVXBUbyI6IjIwMTgtMTAtMTQifSx7ImNvZGUiOiJDTCIsInBhaWRVcFRvIjoiMjAxOC0xMC0xNCJ9LHsiY29kZSI6IlBDIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In0seyJjb2RlIjoiUlNVIiwicGFpZFVwVG8iOiIyMDE4LTEwLTE0In1dLCJoYXNoIjoiNjk0NDAzMi8wIiwiZ3JhY2VQZXJpb2REYXlzIjowLCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-Gbb7jeR8JWOVxdUFaXfJzVU/O7c7xHQyaidCnhYLp7v32zdeXiHUU7vlrrm5y9ZX0lmQk3plCCsW+phrC9gGAPd6WDKhkal10qVNg0larCR2tQ3u8jfv1t2JAvWrMOJfFG9kKsJuw1P4TozZ/E7Qvj1cupf/rldhoOmaXMyABxNN1af1RV3bVhe4FFZe0p7xlIJF/ctZkFK62HYmh8V3AyhUNTzrvK2k+t/tlDJz2LnW7nYttBLHld8LabPlEEjpTHswhzlthzhVqALIgvF0uNbIJ5Uwpb7NqR4U/2ob0Z+FIcRpFUIAHEAw+RLGwkCge5DyZKfx+RoRJ/In4q/UpA==-MIIEPjCCAiagAwIBAgIBBTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE1MTEwMjA4MjE0OFoXDTE4MTEwMTA4MjE0OFowETEPMA0GA1UEAwwGcHJvZDN5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQC9WZuYgQedSuOc5TOUSrRigMw4/+wuC5EtZBfvdl4HT/8vzMW/oUlIP4YCvA0XKyBaCJ2iX+ZCDKoPfiYXiaSiH+HxAPV6J79vvouxKrWg2XV6ShFtPLP+0gPdGq3x9R3+kJbmAm8w+FOdlWqAfJrLvpzMGNeDU14YGXiZ9bVzmIQbwrBA+c/F4tlK/DV07dsNExihqFoibnqDiVNTGombaU2dDup2gwKdL81ua8EIcGNExHe82kjF4zwfadHk3bQVvbfdAwxcDy4xBjs3L4raPLU3yenSzr/OEur1+jfOxnQSmEcMXKXgrAQ9U55gwjcOFKrgOxEdek/Sk1VfOjvS+nuM4eyEruFMfaZHzoQiuw4IqgGc45ohFH0UUyjYcuFxxDSU9lMCv8qdHKm+wnPRb0l9l5vXsCBDuhAGYD6ss+Ga+aDY6f/qXZuUCEUOH3QUNbbCUlviSz6+GiRnt1kA9N2Qachl+2yBfaqUqr8h7Z2gsx5LcIf5kYNsqJ0GavXTVyWh7PYiKX4bs354ZQLUwwa/cG++2+wNWP+HtBhVxMRNTdVhSm38AknZlD+PTAsWGu9GyLmhti2EnVwGybSD2Dxmhxk3IPCkhKAK+pl0eWYGZWG3tJ9mZ7SowcXLWDFAk0lRJnKGFMTggrWjV8GYpw5bq23VmIqqDLgkNzuoog==

idea使用spring boot 热更新、热加载:
1、Settings->Build project automatically
2、Ctrl+Shift+A ->搜索registry，找到Registry...，注意是后面有三个点的那个，然后找到compiler.automake.allow.when.app.running，勾选

Corporation 公司,社团
operation not permitted 操作不允许(权限不足？)
确定的变量+确定的数据类型时先声明赋值，避免NaN

www.gang70.com
www.shui70.com
www.tie70.com
www.hai70.com
www.i7075.com
www.phone75.com

www.paipan.red
www.shuangxi.red
www.lionking.red
www.chedan.red
www.guonian.red
www.dayun.red
www.fenghuo.red
www.huohu.red
www.huoji.red 火鸡 火机 伙计 活鸡 
www.tuteng.red
欣怡 子涵 子轩 浩宇 浩然

http://222.222.124.77:9001/jquery.min.js //jQuery HFS路径

【git路径】
日报上传：http://buzhiming@192.168.185.250:7070/r/RCSMatrix.Dev.Document.git

URL_Manager代码：http://xiaohongwei@192.168.185.250:7070/r/RCSMatrix.Base.Web.urlmanager.git? URL管理服务
URL_Manager代码：http://buzhiming@192.168.185.250:7070/r/RCSMatrix.Base.Web.urlmanager.git

客户端升级管理系统：git clone http://buzhiming@192.168.185.250:7070/r/RCSMatrix.WEB.VersionManager.git
部署地址：http://192.168.185.250:8180/versionmanager/index.html#/white_list

usercenter管理：
http://buzhiming@192.168.185.250:7070/r/microservice/RCSMatrix.sys.usercenter.web.git

问卷调查：
http://buzhiming@192.168.185.250:7070/r/RCSMatrix.OA.Survey2.0.git
localhost:8756/login.jsp   rcs@139.com  123456

领福利 优惠券活动
http://buzhiming@192.168.185.250:7070/r/RCSMatrix.OA.Promote.git


密友圈运维系统
http://buzhiming@192.168.185.250:7070/r/WEB/RCSMatrix.WEB.ConsumerSys.git

卡券【renrenfast + vue】
http://buzhiming@192.168.185.250:7070/summary/RCSMatrix.Base.Web.urlmanager.git

JIRA敏捷系统  buzhiming+123456
zmbuc@isoftstone.com  whkay+8F  bu+137554045 bzm+55555 isoftstone 

github+heox搭建博客
软件技术服务 ios

【框架、库链接】 
Vue2.0官方指南：https://cn.vuejs.org/v2/guide
Iview UI组件库：http://v1.iviewui.com   基于vue的PC中后台样式库
ElementUI 组件：http://element.eleme.io  基于vue的PC中后台样式库
Mint-UI 组件：http://mint-ui.github.io/#!/zh-cn  基于vue的移动端UI组件(IOS风格)
MUI：http://dev.dcloud.net.cn/mui  移动端UI组件
weex：http://weex.apache.org/cn/

【markdown】
# 标题
* 无序列表
1. 有序列表
> 引用内容
[]() 插入引用
![]() 插入图片
**粗体**
*斜体*
*** 分割线
`代码框-新七龙`

【微信公众平台】
公众号：381042434@qq.com bu+55555
小程序： 137554045@qq.com bu+55555
AppID(小程序ID): wx7e9186940992e232

1943-12-17 3 癸未十一月廿一 （大雪8日7时26分，冬至23日1时21分）
2017-10-14 18 丁酉九月廿五  （寒露8日10时20分，霜降23日13时26分）
1997-1-9 2 丙子腊月一日 （小寒5日15时24分，大寒20日8时42分）

1997-1-9腊月初一，2017-7-23闰六月初一

【node】
?基于node的服务启动工具live-server：① npm i live-server -gf   → ②在当前目录>leve-server

【W3C】
?页面跳转：
 <a href="url" target="_blank"></a>     _self  _blank 
 window.parent.location.href=url或 window.open("url","_parent|_self|_blank") 在父窗口跳转（一般在iframe中使用）
?尺寸单位：
 em  相对于当前字大小
 rem  相对于html根字体大小(100份)
 vh vw  1vh|1vw相对于设备高宽的1%
?input文本框底部红色波浪线解决： 加属性spellcheck="false"
?bootstrap表格列宽无法设置： 在table标签添加style="table-layout:fixed"
?文字自动换行:word-wrap: break-word;
?设置盒子最小高度:min-height:10px;
?设置字与字间距：letter-spacing
?解决浏览器滚动条出现时窗口宽度变动：html或body{overflow:scroll;}  //scroll无论是否溢出都显示滚动条，hidden隐藏溢出，auto溢出时显示
?实现高度满屏：html,body{height:100%}
?禁止点击标志： cursor:not-allowed|pointer    ---禁止标志|小手
?禁止选中&复制设置：
  CSS设置禁止选中：
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
  JS设置禁止选中：
	绑定onselectstart事件，return false --禁止选中
	绑定oncontextmenu事件，return false --禁止右键
?placeholder字体设置：
 input::-webkit-input-placeholder { color: #D6D0D0; }
 input::-webkit-input-placeholder{color: #D6D0D0;}
 input::-moz-input-placeholder{color: #D6D0D0;}
 input::-ms-input-placeholder{color: #D6D0D0;}
?background: #fff url("./1.png")  no-repeat  fixed left top
 background: 颜色 url()  重复样式  滚动或固定 x位置  y位置 （按需写）
?伪元素清除浮动：
.clearfix:after{
  content: "020"; 
  display: block; 
  height: 0; 
  clear: both; 
  visibility: hidden;  
 }
<script defer>和<script async>
defer 属性标注的脚本是延迟脚本，使得浏览器延迟脚本的执行，也就是说，脚本会被异步下载但是不会被执行，直到文档的载入和解析完成，并可以操作，脚本才会被执行。
async 属性标注的脚本是异步脚本，即异步下载脚本时，不会阻塞文档解析，但是一旦下载完成后，立即执行，阻塞文档解析。
css3一些属性兼容写法：
transform: translateX(-50%);
-ms-transform: translateX(-50%);
-moz-transform: translateX(-50%);
-webkit-transform: translateX(-50%);
-o-transform: translateX(-50%);

    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;

【node.js】
?node---path模块，nodeJs的path对象，如何用来处理目录，path.join,path.resolve,path.relative.path

【登录验证方案】
?token登录验证基本逻辑：
→登录成功返回一个token记号(具有有效期)；
→存取到cookie(周期一般设置为会话，必要的话加上max-age有效期)；
→在操作页面接口请求时带在requestHeader中发给服务器验证；
→如果过期，根据返回的失败码跳转到登录页面；
//$.ajax()中设置requestHeader:
    beforeSend:function(xhr){
       xhr.setRequestHeader("test5","token555");  //请求头添加token信息
    }

【Vue.js + vue-router + vue-resource + vuex】
 ===Vue.js===
?vue插件：试过3个插件： vue, VueHelper 和 vetur ，最终选择使用 vetur 。
?.gitignore   设置非提交文件：.*  /node_modules   /dist
?elementUI使用问题:
① ERROR in ./   ...element-icons.woff?t=    （字体加载失败）---解决方法：loader配置中增加woff2?文件  test: /\.(png|jpg|gif|ttf|woff2?)$/,
注：使用bs也会出现这样的问题
② 修改ele标签的样式：查看html源码，选中元素并设定样式 !important;
?DOM绑定事件、传参：
<a href="#" @click="edit(i,$event)" :data-i="555" >编辑</a>
 获取：edit(d,e)=>{ e.target 或 e.target.getAttribute("data-i")}

vue cli踩坑：
①打包报缩进字数、少空格等错误：找到根目录build文件夹的webpack.base.conf.js，将eslint-loader检测代码加载器去除或注释 （人神共愤的处女座）
②webpack处理less文件报错Cannot find module ‘less’：官方说安装less-loader style-loader css-loader可解决，然并卵；需要 npm install less --dev 解决。
③error  in ./~/element-ui/lib/theme-default/index.css
Module build failed: Unknown word (5:1)
解决：去掉 webpack.base.conf.js文件中，对css文件的loader
        // {
        //   test: /\.css$/,
        //   use: [
        //       'style-loader',
        //       'css-loader'
        //   ]
        // },
④

  3 | // load the styles
  4 | var content = require("!!../../../_css-loader@0.28.7@css-loader/index.js?{\"minimize\":false,\"sourceMap\":false}!./index.css");
> 5 | if(typeof content === 'string') content = [[module.id, content, '']];
    | ^

 ===vue-router===
?带参数跳转：
 <router-link to="/edit">Redirect</router-link>  //无参数
 <router-link :to="{name:'edit',params:{id:{id:001} }}">  //路由path:"/edit/:id?"
 this.$router.push({name:‘edit’,params:{id:id}})
 取参数：data:function(){return{ id:this.$route.params.id }}


 ===vue-resource===
?可以通过XMLHttpRequest或jsonp发起请求并处理相应; vue-resource大小仅12kb; 支持IE9以上主流浏览器
?在实例中使用$http:
 this.$http.get(url,{option}).then(successCallback,errorCallback).catch(res=> //异常 );
 this.$http.post(url,body,{option}).then(successCallback,errorCallback).catch(res=> //异常 );
 例:
 this.$http.post(url,body,{
	url: 请求的url,
	method:  如"GET","POST"等,
	body: 可以是object/formData/string,
	params: object 设置url参数对象,(仅Get请求)
	headers: object 设置请求头,
	timeout: mumber 设置超时毫秒值,
	before: function(request){} 发送前的处理函数，类似jQ的beforeSend函数,
	progerss: function(event){} progressEvent回调处理函数,
	credentials:true|false 设置跨域请求时是否使用凭证,
      ???withCredentials:true?????
	emulateJSON:true|false 将request body以application/x-www-form-urlencoded content type发送

 }).then(
	function(response){ 
		response.text() 以字符串形式返回response body
		response.json() 以JSON形式返回response body
 		response.blob() 以二进制形式返回response body
		response.ok  响应的HTTP状态码为200-299之间时，该属性为true
		response.status 	响应的HTTP状态码
		response.headers   响应头object	
	},
	function(response){ //???只在响应失败时调用??? }
 ).catch(response=> //???catch 整个响应过程出错就会调用??? );


?使用interceptors拦截器：
 流程：发送请求前→interceptors→处理请求→发送请求后(接收响应)→interceptors→成功回调|失败回调
Vue.http.interceptors.push(function(request,next){
  //发送前处理逻辑
      if(sessionStorage.getItem('token')){
        request.headers.set("token5",sessionStorage.getItem('token'));
    }
	next(function(response){ 
		//发送后逻辑
	})
 });

Vue.http.options.emulateJSON = true;
Vue.http.options.crossOrigin = true;
Vue.http.options.emulateHTTP = true;
Vue.http.interceptors.push(request, response);


?获取DOM：
 标签中定义 ref="名"，通过 vm.$refs.名 获取
?路由嵌套：
        {   path:"/test",
            component:V_test,
            name:"tL",
            children:[
                {path:"/t1",component:V_t1},
                {path:"/t2",component:V_t2},
            ]
        }  --在子页面定义一个router-view标签

<a v-link="{name: 'user', params: {userId: 1}">跳转</a>
?绑定类名：
 <div :class="{'c1':isShow,'c2'}">
 <div :class="classA ? 'class-a' : 'class-b' ">
?vue实例代码：
var vm = new Vue({
	el:"#app",  //挂载到指定的DOM（可以是选择器或元素实例，vm.$el可以访问）
	data:function(){ return{ d1:55 } }，  //声明数据
	methods:{ fn:function(){ return this.d1 }  },  //声明函数
	watch:{	 "d1":"fn" }，//观察数据变化调用响应的函数(注：使用箭头函数this不是vue)


	beforeCreate:function(){ //vm初始化后调用 },
	?created:function(){ //完成了各种数据观测和运算，挂载未开始 },
	beforeMount:function(){//render函数首次调用},
	?mounted:function(){//挂载完成  vm.$el和vm.$refs可用},
	beforeUpdate:function(){数据更新时调用，在虚拟DOM渲染前}，
	updated:function(){DOM根据新数据重新渲染完成},
	beforeDestroy:function(){//销毁前},
	destroyed:function(){//销毁后},
})



【jQuery】
$(document).children("a") 选中子元素中的a标签元素
$("input[name='approve']:checked").val()  获取被选中的值
$.param(paramData) 对象转query语句
$("p").after("<p>Hello world!</p>"); //在选中的元素后面插入内容
$("span").closest("ul").css({"color":"red"});//选中父元素中的"ul"(从当前元素开始往上遍历)
$("span").parents("ul").css({"color":"red"});//选中父元素中的"ul"(从父元素开始往上遍历)

【vue温故知新】
?Vue实例
 var vm = new Vue({
	el:"#app", //创建一个实例，并关联视图区 
	data:{
		mum1:1  //可以vm.num1访问，先设置初始值保证变动后视图更新
		str:"",
		num:0,
		bool:false,
		arr:[],
		obj:null
	     }
	}) 

?Vue的API 
 ?实例的属性(都带有前缀$)
  $refs 给组件、dom元素注册(做标记)
  	如：<p ref="one"></p>   //用vm.$refs.one获取
  $data 获取data对象 vm.$data === data // true
  $el 获取关联的视图 vm.$el === document.getElementById("app") // true
 ?实例的方法和数据
  $refs 
 

?组件化应用构建：
 
?vue指令
 v-cloak指令：解决变量闪烁问题()
	用法：<div id="app" v-cloak> {{msg}}</div>  样式：[v-cloak] { display: none }
 v-if="isShow" 是插入或删除节点
   v-show="isShow" 是隐藏或显示节点
 v-bind:data-m="msg"或：data-m="msg"  --绑定属性
 v-bind:key="v.id"  绑定一个数据唯一值，用于虚拟DOM算法，优化渲染效率
 v-on:click="getA"|@click="getA"、v-on:clidk.stop="getA"(.stop阻止事件冒泡) 
 v-once  加了v-once的元素只会渲染一次，之后数据变化也不会渲染
 v-pre 通知编译器跳过当前dom元素,节省编译时间
 ref="ac"  访问dom  vm.$refs.ac
 v-for="(v,i) in list"
 ?绑定类名：
 <div :class="{'c1':isShow,'c2'}">
 <div :class="classA ? 'class-a' : 'class-b' "> //三元运算
? filters:{ formatPrice:function(val){return "$"+val;} }   组件的
    Vue.filter("formatP",function(val){return '$'+val }  )  全局的
? 定义全局组件： var t = Vue.extend({template:"<h1>tit</h1>"},data:function{return{ })
	Vue.component("v-p",t)
	注：template:"#id" 选择器定义也可以
? 父组件中切换子组件：
	<component v-if="tn=='a'" :is="a组件名" :data-msg="msg"></component> 
	<component v-if="tn=='a1'" :is="a1组件名" :data-msg="msg1"></component> 
	<component v-else :is="a组件2" :data-msg="msg2"></component> 
? 父子数据互传：
    父传子：<v-son :data="dd"></v-son>   子组件中：props:["dd"]
    子传父：定义一个方法，发送一个事件给父，父监听，一旦触发就可以对数据处理
	watch:{‘sonD’: function(){this.$emit("getD",this.msg,this.msg1)}  }
	<v-son @getD="get"></v-son>    定义方法：get:function(arguments){ } 
? computed选项：定义计算属性(渲染前进行计算)，内部有缓存机制，如果没变化就从缓存取(复杂的数据处理可以放到这里)
	<p>{{content}}</p>
	computed:{content:function(){return this.val+"111"}}
? 定义一个处理关键字的指令：
        Vue.directive('keyword', function(el, obj) {  //el是所在标签
            let tagName = obj.arg || 'i';  //obj.arg是标签名“strong”
            let k = obj.value;             //obj.value是要替换的值“k”
            let text = el.textContent;  //获取到文本
            let reg = new RegExp(k, 'g');  //全局匹配k
            el.innerHTML = text.replace(reg, function(all) {  //传入一个回调，返回的就是需要替换的内容
                let color = 'blue';
                return `<${tagName} style="color:${color}">${all}</${tagName}>`;   //利用``字符串模板拼接所需显示的样式
            });
        });	
? $route对象：$route.params   $route.query  -->hash/path/fullPath/name...
   $router对象：$router.go(-1)

        var vm = new Vue({
            el: '#app',
            // 3/这是MVVM中的m
            data: {
                valP: '嘿嘿',
                valDiv: '咯咯'
            },
            beforeCreate: function() {
                console.log('vm已就绪');
            },
            created: function() {
                console.log('m已就绪');
            },
            beforeMount: function() {
                console.log('v已就绪');
            },
            mounted: function() {
                console.log('项目已运作');
            },
            beforeUpdate: function() {
                console.log('修改数据，页面还没有刷新');
            },
            updated: function() {
                console.log('视图也更新了');
            },
            beforeDestroy: function() {
                console.log('销毁前');
            },
            destroyed: function() {
                console.log('销毁后');
            }
        });		

【vue cli】
?vue-cli 构建的项目添加less
步骤：
npm install less less-loader --save-dev
打开 build/webpack.base.conf.js ，在 module.exports = 的对象的 module.rules 后面添加一段：

module.exports = {
    //  此处省略无数行，已有的的其他的内容
    module: {
        rules: [
          //  此处省略无数行，已有的的其他的规则
          {
            test: /\.less$/,
            loader: "style-loader!css-loader!less-loader",
          }
        ]
    } 
} 。
最后，在代码中的 style 标签中 加上 lang="less" 属性即可~

<style scoped lang="less">

</style>
?打包后index.html 找不到文件"f.js::ERR_FILE_NOT_FOUND":
 config目录index.js中的assetsPublicPath: '/'，将/改成./ 
?打包后static目录中.map文件过大：
 config目录index.js中的productionSourceMap:ture，将ture改成false 
?打包后iview字体图标异常：
 build.js目录webpack.prod.conf.js中utils.styleLoaders中的extract改成false

【XHLHttpRequest2.0】
xhr.timeout = 3000;  //超时3秒后,停止请求
FormData对象
FormData对象.append(name,file)  // 文件键值对(包装文件)

文件上传案例:
var myFile=input_file_ele.files[0]; //得到选中的文件
var fromData = new FromData() ;  //创建FromData对象
fromData.append("myFile",myFile); //fromData对象包装文件
var xhr = new XMLHttpRequest();
xhr.open("post","upload.php"); //以post方式,发给服务端 (不用请求头)
xhr.upload.onprogress = function(e){  //ajax.upload.onprogress= function(event){} 文件上传进度
   var progressBar = Math.floor((e.loaded/e.total)*100);//事件对象.loaded/total(已完成字节/总大小字节),取整后百分比作为进度显示
   }
xhr.send(fromData);  //发送给服务端






【code】
//封装操作cookie方法
var cookie = {
            set:function(key,val,time_s){  //参数是：键，值，有效期（秒） 不传time_s表示当前会话
                document.cookie = key+"="+val+";max-age="+time_s;
            },
            get:function(key){
                var c = document.cookie.replace(/[ ]/g,"");  //将空格去除
                var arr = c.split(";");
                for(var i=0;i<arr.length;i++){
                    if(arr[i].split("=")[0]==key){
                        return arr[i].split("=")[1];
                    }
                }
            },
            delete:function(key){
                document.cookie = key + "=v;max-age=-1";
            }
        }



【photoshop】
Ctrl+R 显示/隐藏标尺
Ctrl+tab 文档切换

【文件下载】
    var iframe = document.createElement("iframe");  
    document.body.appendChild(iframe);  
    iframe.src ="路径"

【短小精干的js代码】
?驼峰命名转下划线：
'componentMapModelRegistry'.match(/^[a-z][a-z0-9]+|[A-Z][a-z0-9]*/g).join('_').toLowerCase();

?随机颜色：
(function(){
return '#'+('00000'+(Math.random()*0x1000000<<0).toString(16)).slice(-6);
})()

?多维数组砍成一维：
var foo0 = [1, [2, 3], [4, 5, [6,7,[8]]], [9], 10];
var foo1 = foo0.join(',').split(',');

?计算相同出现的次数：
"abcabcdea".split('').reduce((p, k) => (p[k]++ || (p[k] = 1), p), {});

?打星评分
var rate = 2;
"★★★★★☆☆☆☆☆".slice(5 - rate, 10 - rate); 

【css代码】
 1.汉白玉浮雕文字
        #MySignature {
            display: block;
            margin: 40px 40px 40px 0;
            font-size: 30px;
            color: #f1ebe5;
            text-shadow: 0 8px 9px #c4b59d, 0px -2px 1px #fff;
            font-weight: bold;
            text-align: center;
            background: linear-gradient(to bottom, #ece4d9 0%,#e9dfd1 100%);
            border-radius: 10px;
            line-height: 60px;
            cursor: default;
        }
2.圣杯布局
    	左中右元素float:left;
	中元素width：100%;
	左右相对于父元素定位：left:0,right:0
	父元素padding:0 左右元素的定宽
    <style>
        body {text-align: center;}
        .header {width:100%; background-color:pink}
        .container { padding:0 110px; }
        .main {padding:0 220px; position: relative;}
        .middle {float:left; width:100%; background-color: lime; }
        .left { float:left; width:200px; background-color: skyblue; position:absolute; left:0; }
        .right { float:left; width:200px; background-color: skyblue; position:absolute; right:0; }
        .footer {width:100%; background-color:pink}
        .clearfix:after{content:'';height:0;line-height:0;display:block;visibility:hidden;clear:both } //伪元素清除浮动
        .clearfix {zoom:1;}
        .clear {clear:both; } //加元素清除浮动

    </style>
</head>
<body>
        <div class="header">Header</div>
        <div class="container">
            <div class="main clearfix">
                <div class="left">Left</div>
                <div class="middle"> middle</div>
                <div class="right">Right</div>
            </div>
        </div>
        <div class="footer">Footer</div>
</body>
	


ENTP
毛泽东
马基雅维利
苏格拉底
富兰克林
奥巴马
达芬奇
罗素
伏尔泰

INTP
谢尔盖布林、拉里佩奇（Google创始人）
林肯
爱因斯坦
康德
达尔文
居里夫人
卐阿尔伯特·施佩尔
笛卡尔
亚当斯密
米尔顿·弗里德曼（经济学家）
詹姆士·麦迪逊（James Madison，1751年3月16日—1836年6月28日），美国第四任总统
巴门尼德(公元前5世纪希腊哲学家);

ENTJ
拿破仑
比尔盖茨
斯大林
杰克·韦伯

INTJ
列宁
黑格尔
扎克伯格
特斯拉
牛顿
马克思
尼采
施瓦辛格


ENFP
切格瓦拉
卡斯特罗（古巴元首）
卡扎菲（利比亚领袖）

INFP
莎士比亚
梵高

ENFJ
卐戈培尔
阿拉法特

INFJ
卐希特勒
托洛茨基
本拉登
蒋介石
甘地
柏拉图
托马斯杰斐逊
叔本华

ESTJ --桂胜、
萨达姆
撒切尔夫人
希拉里
赖斯

ISTJ
卐邓尼茨
卐曼斯坦因
伊丽莎白二世


ESFJ --森、
杜鲁门
卐里宾特洛甫
芭芭拉·沃尔特斯(电视女王)

ISFJ
卐希莱姆
卐威廉·凯特尔
老布什

ESTP  
卐戈林
丘吉尔
罗斯福
肯尼迪
特朗普
小布什
巴顿
麦克阿瑟

ISTP
卐隆美尔
乔布斯
普京

ESFP --石头、
克林顿
墨索里尼
阿明
莱昂纳多·迪卡普里奥

ISFP
卐赫斯
贝克汉姆




2016.2-  东莞软通动力信息技术有限公司 高级前端  前端代码实现/带领新人/前端架构搭建/体系文件建立
2014.2-2016.1 东莞市快马网络科技有限公司  网站开发工程师  网站开发
2010.9-2013.12 广州南部工程塑料有限公司 IT专员 办公周边设施的维护
2007-2010.2 广州阿雷斯提汽车零部件有限公司(实习)  产品助理工程师

技术栈：
PC端网站：jQ+BS+固定模板
移动端网站：jQueryMobile+MUI+
手机APP：react+vuejs+angularJS
OA系统(中后台）：LayerUI、vue+Element&Iview、renren-fast

基本开发能力：
熟练使用HTML、CSS、Javascript实现前端UI及业务功能；
熟练使用jQuery、AJAX、Less、Axios、socket.io、jsonp、Bootstrap等工具进行日常开发；
熟练使用vuejs/vue-resource/vue-router/vuex框架技术开发项目，对angularJS、Backbone有一定了解；
熟悉基于NodeJS的webpack、npm和Git搭建前端开发环境；
熟悉使用HTML5、CSS3技术进行移动端开发；
熟悉HTTP缓存机制及常见兼容问题并适配；
了解NodeJS和ES6，可搭建简单的后台服务、实现页面数据爬取、excel表格导入导出等简单功能；
了解Canvas和Echart，实现前端数据可视化；

主要职责：
负责公司新产品或版本升级的前端代码开发、测试跟进、bug修复；
对公司后台管理系统的前端技术选型、开发环境搭建；
协调统筹前端团队新人的工作.

负责公司网站业务的前端代码开发和版本升级；
基于GB856T--88标准，建立公司内的体系文件；
跟进客户资质认定的评审活动；

有多年的PC/移动网站、APP HTML5、后台管理系统前端开发经验，有基于GB856T--88标准，建立公司内的体系文件的实践。

工程化能力：
熟悉建立开发过程管理的体系文件，了解GB856T--88标准，有参与过客户资质认定的评审活动；
可根据公司项目需求进行前端技术选型，保证产品质量和高效协作； (效率、团队协作、可扩展低耦合 =》 技术选型→协作开发→优化)

以往经历项目：
混合APP HTML5开发：密友圈APP、和飞信APP、健客网上药店APP
密友圈APP:详见应用商店
主要技术：jQuery、MUI、rem适配
和飞信APP:详见应用商店
主要技术：vuejs/vue-router/vuex、mintUI、MUI
健客网上药店APP：详见应用商店
主要技术：vuejs/vue-router/vuex、axios、mintUI、MUI

后台管理系统前端开发：密友圈运维系统、版本管理系统、用户管理中心系统
用户管理中心(中国移动公司内部项目)
主要技术：基于Layui1.0、jQuery、require.js的开源后台框架
密友圈运维系统(中国移动公司内部项目)
主要技术：vuejs/vue-resource/vue-router、elementUI
版本管理系统(中国移动公司内部项目)
主要技术：同上

PC/移动网站前端开发：健客网上药店、 瑞博公司门户站、协众机床门户站
健客网上药店(移动站) https://m.jianke.com
主要技术：vuejs/vue-router/vuex、axios、mintUI、MUI
瑞博公司门户站(PC站+移动站) http://www.raybest-hk.com
主要技术：jQuery、swiper、lazyload.js
协众机床门户站(PC站+移动站) http://www.waytrain-cn.com
主要技术：jQuery、swiper、lazyload.js



提升途径：
实践中以目的驱动学习；
大牛的分享，阮一峰、廖雪峰；
反复阅读经典书：
《js高级程序设计》《js语言精粹》《你不知道的JS》

东莞市微观网络信息技术有限公司 余胜鹏 
东莞市快马网络科技有限公司 张远枝 
东莞软通动力信息技术有限公司 0769-22893659 李明远(李总)






◆工作主要职责：
1）根据原型和设计稿，开发公司产品的PC/移动前端代码；
2）对公司后台管理系统类产品的前端技术选型，和开发环境搭建；
3）项目测试情况跟进、bug修复；
4）协调统筹前端团队新人的工作.


◆工作技能：
1）熟练使用HTML、CSS、Javascript实现前端UI及业务功能；
2）熟练使用jQuery、AJAX、Less、Axios、socket.io、Bootstrap等工具进行日常开发；
3）熟练使用vuejs/vue-resource/vue-router/vuex框架技术开发项目；
4）熟悉基于NodeJS的webpack、npm和Git搭建前端开发环境；
5）熟悉使用HTML5、CSS3技术进行移动端开发；
6）熟悉HTTP缓存机制及常见兼容问题并适配；
7）熟悉NodeJS和ES6，可搭建简单的后台服务、实现页面数据爬取、excel表格导入导出等功能；




有PC/移动站、混合APP HTML5开发经验，参与过密友圈APP、和飞信APP、健客网上药店APP、过多个中国移动公司后台管理系统的开发；
有基于GB856T--88标准建立公司开发体系文件，对应客户评审的实践。



 通常我们在vue里面使用别人开发的组件，第一步就是install,第二步在main.js里面引入，第三步Vue.use这个组件。今天我简单的也来use一个自己的组件。

这里我用的webpack-simple这个简单版本的脚手架为例，安装就不啰嗦了，直接进入正题

首先看下目前的项目结构：



webpack首先会加载main.js，所以我们在main的js里面引入。我以element ui来做对比说明

复制代码
import Vue from 'vue'
import App from './App.vue'

// 引入element-ui组件
import ElementUi from 'element-ui'
import 'element-ui/lib/theme-default/index.css'

// 引入自定义组件。index.js是组件的默认入口
import Loading from '../components/loading'
Vue.use(Loading);

Vue.use(ElementUi);
new Vue({
  el: '#app',
  render: h => h(App)
})

然后在Loading.vue里面定义自己的组件模板


<!-- 这里和普通组件的书写一样 -->
<template>
    <div class="loading">
        loading...
    </div>
</template>

在index.js文件里面添加install方法
import MyLoading from './Loading.vue'
// 这里是重点
const Loading = {
    install: function(Vue){
        Vue.component('Loading',MyLoading)
    }
}

// 导出组件
export default Loading
接下来就是在App.Vue里面使用组件了，这个组件已经在main.js定义加载了


<template>
  <div id="app">
  <!-- 使用element ui的组件 -->
  <el-button>默认按钮</el-button>

  <!-- 使用自定义组件 -->
  <Loading></Loading>
  </div>
</template>





岗位职责：
1、负责公司系统平台前端架构及开发工作；
2、理解并遵守设计规范，配合后台实现业务接口及数据交互；
3、参与系统设计，功能模块设计，前端功能开发；
4、参与解决系统性能优化和技术难点攻关；

任职要求：
1、熟悉使用各种 web 前端技术，包括 HTML5、CSS、Javascript、Node.js 等；
2、熟悉一种或多种常用前端框架库，如vue、react、angular等；
3、熟悉使用 webpack、gulp、requireJS 等模块化、工程化工具；
4、能够高效编写 web 界面，熟练使用 Git 等版本管理工具；
5、熟悉后端服务器运行环境和数据通信协议，vue.js, bootstrap 等前端框架；
6、有较强的 AJAX 、GraphQL、Apollo 前后台数据交互经验， json 数据格式，并且能配合后台写 JS 的业务逻辑的经验；

优先录用：
1、两年及以上 web 前端开发工作经验；
2、有实际的 Node.js 项目开发经验者优先考虑；
3、对 GraphQL 有一定的了解
4、有开源作品或参与开源项目（请附 github 地址）
5、拥有开发流程中的代码规范意识、配置管理规范意识、文档撰写规范意识

PS：近期在天河棠下上班，3月份公司整体搬到珠江新城津滨腾越大厦